# 🔗 Link Extractor - セットアップガイド

WebサイトからリンクAを抽出し、差分検出を行うローカルアプリケーション

## 📋 機能

- ✅ Webサイトからリンクを自動抽出
- ✅ 前回実行時との差分検出
- ✅ 内部リンクのみフィルタリング
- ✅ クエリパラメータ・アンカー除去
- ✅ 抽出履歴の保存・管理
- ✅ 複数フォーマットでのコピー機能
- ✅ レスポンシブなWebUI

## 🛠️ セットアップ手順

### 🚀 ワンコマンド起動（推奨）

#### macOS/Linux
```bash
./start.sh
```

#### Windows
```cmd
start.bat
```

### 📋 必要な環境

- Python 3.7+
- pip（Pythonパッケージマネージャー）

### 📁 ファイル構成

```
link_extractor/
├── app.py              # Pythonバックエンド
├── link_extractor.html # Webフロントエンド
├── requirements.txt    # Python依存関係
├── start.sh           # macOS/Linux起動スクリプト
├── start.bat          # Windows起動スクリプト
└── README.md          # このファイル
```

### 🔧 手動セットアップ（必要に応じて）

#### Windows
```cmd
# 1. 仮想環境作成
python -m venv venv
venv\Scripts\activate

# 2. 依存関係インストール
pip install -r requirements.txt

# 3. アプリ起動
python app.py
```

#### macOS/Linux
```bash
# 1. 仮想環境作成
python3 -m venv venv
source venv/bin/activate

# 2. 依存関係インストール
pip install --upgrade pip
pip install -r requirements.txt

# 3. アプリ起動
python app.py
```

### 5. アクセス

ブラウザで以下にアクセス：
```
http://localhost:8080
```

## 🎯 使い方

### 基本的な使い方

1. **URL入力**: 抽出したいWebサイトのURLを入力
2. **オプション設定**: 
   - 内部リンクのみ: 同じドメインのリンクのみ抽出
   - アンカー除去: `#section` 部分を除去
   - クエリパラメータ除去: `?param=value` 部分を除去
3. **抽出開始**: 「リンク抽出開始」ボタンをクリック
4. **結果確認**: タブで結果を確認・コピー

### 差分検出

- 同じURLを再度実行すると、前回との差分を自動検出
- 新しいリンクは緑色でハイライト表示
- 「新しいリンク」タブで新規追加分のみ確認可能

### コピー機能

「コピー用」タブで以下の形式でコピー可能：
- **スペース区切り**: `URL1 URL2 URL3`
- **改行区切り**: 各URLを改行で分割
- **新規のみ**: 新しいリンクのみをコピー

## 📁 データ保存

- 履歴データ: `link_extractor_data/history.json`
- 最新50件の抽出結果を自動保存
- 「履歴クリア」で全データ削除可能

## 🤖 NotebookLMとの連携

### NotebookLMでの効果的な活用方法

1. **ドキュメントサイト全体の分析**
   - 技術ドキュメント、API仕様書、ガイドラインなどを一括取得
   - NotebookLMで横断的な質問・分析が可能

2. **推奨設定**
   ```
   ✓ 内部リンクのみ: 関連性の高いページのみ抽出
   ✓ アンカー除去: 同一ページの重複を防止
   ✓ クエリパラメータ除去: 不要なパラメータを削除
   ```

3. **コピー形式の選択**
   - **改行区切り**: NotebookLMのソース追加に最適
   - **スペース区切り**: 一行でのURL一覧表示
   - **新しいリンクのみ**: 更新分のみを追加したい場合

4. **活用例**
   - **学習・研究**: 専門分野のドキュメントを包括的に分析
   - **競合調査**: 他社サイトの構造・コンテンツ分析
   - **SEO分析**: サイト構造の把握と改善点の発見
   - **コンテンツ監査**: 既存サイトの全ページチェック

## 🔧 API仕様

### POST /api/extract
リンク抽出API

**リクエスト:**
```json
{
  "url": "https://example.com",
  "options": {
    "internal_only": true,
    "remove_query": true,
    "remove_anchors": true
  }
}
```

**レスポンス:**
```json
{
  "base_url": "https://example.com",
  "all_links": ["url1", "url2", "..."],
  "new_links": ["new_url1", "new_url2"],
  "total_count": 50,
  "new_count": 5,
  "timestamp": "2025-01-03T12:00:00"
}
```

### GET /api/history
履歴取得API

### DELETE /api/history
履歴削除API

## ⚠️ 注意事項

### 制限事項
- robots.txtを尊重してください
- 過度なリクエストは避けてください
- 一部のサイトはアクセス制限がある場合があります

### トラブルシューティング

**エラー: "Webページの取得に失敗しました"**
- URLが正しいか確認
- サイトがアクセス制限をしていないか確認
- ネットワーク接続を確認

**エラー: "モジュールが見つかりません"**
- `pip install -r requirements.txt` で依存関係を再インストール
- 仮想環境がアクティブになっているか確認

**macOSでlxmlのインストールエラー**
- `pip install --upgrade pip` でpipを最新版に更新
- `pip install lxml` で最新版のlxmlを個別インストール
- Xcodeコマンドラインツールが必要な場合: `xcode-select --install`

**パフォーマンス問題**
- 大きなサイトは時間がかかる場合があります
- タイムアウト（30秒）を超える場合はエラーになります

**ポートが使用中のエラー**
- 別のポートで起動: `python app.py 9000`
- 環境変数で指定: `PORT=9000 python app.py`
- 使用中プロセス確認: `lsof -i :8080`

## 🔄 アップデート

新しい機能や修正がある場合：
1. 新しいファイルをダウンロード
2. `link_extractor_data/` フォルダは保持（履歴データ）
3. サーバーを再起動

## 📞 サポート

問題が発生した場合：
1. エラーメッセージを確認
2. ブラウザの開発者ツールでログを確認
3. Python実行時のログを確認

## 🎉 よくある使用例

### NotebookLMでの活用
```
目的: ドキュメントサイト全体をNotebookLMで分析
URL: https://docs.example.com/
オプション: 内部リンクのみ ✓, アンカー除去 ✓, クエリパラメータ除去 ✓

手順:
1. リンク抽出後、「改行区切りでコピー」を選択
2. NotebookLMの「Sources」にURLリストを貼り付け
3. 全ページを一括でソースとして追加
4. ドキュメント全体を横断した質問・分析が可能
```

### CodeRabbit ドキュメント抽出
```
URL: https://docs.coderabbit.ai/
オプション: 内部リンクのみ ✓, アンカー除去 ✓, クエリパラメータ除去 ✓
用途: API仕様やガイドラインの一括取得
```

### GitHub Pages サイト
```
URL: https://username.github.io/project/
オプション: 内部リンクのみ ✓
用途: プロジェクトドキュメントの構造把握
```

### 企業サイトのページ一覧
```
URL: https://company.com/
オプション: 全てチェック
用途: サイト構造の分析、SEO監査
```

### 技術ブログの記事一覧
```
URL: https://blog.example.com/
オプション: 内部リンクのみ ✓, クエリパラメータ除去 ✓
用途: 過去記事の一括収集、トレンド分析
```

### オンライン学習サイト
```
URL: https://learn.example.com/course/
オプション: 内部リンクのみ ✓, アンカー除去 ✓
用途: コース内容の全体把握、学習計画立案
```
